import { managedPromise } from "../promises/single/managed.js";
/** An `AsyncIterable` with methods to push data and end it
 *
 *
 * Example scenario with web workers:
 * ```javascript
 * const results = managedAsync()
 * worker.onmessage = e => {
 *    if (e.data === null)
 *      results.end()
 *    else
 *      results.push(e.data)
 * }
 * worker.postMessage(...)
 *
 * for await (const x of results) {
 *  m...
 * }
 * ```
 */
export function managedAsync() {
    const xs = [];
    let ended = false;
    const nextPromise = {
        current: managedPromise()
    };
    async function next() {
        if (xs.length > 0) {
            const value = xs.shift();
            return { value, done: false };
        }
        else if (ended) {
            return { value: undefined, done: true };
        }
        else {
            await nextPromise.current;
            nextPromise.current = managedPromise();
            return next();
        }
    }
    function push(value) {
        xs.push(value);
        if (nextPromise.current.status === 'pending')
            nextPromise.current.resolve();
    }
    function end() {
        ended = true;
        if (nextPromise.current.status === 'pending')
            nextPromise.current.resolve();
    }
    return {
        next, push, end, ended,
        [Symbol.asyncIterator]() {
            return this;
        }
    };
}
