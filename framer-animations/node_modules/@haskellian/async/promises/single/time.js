/** Promise that resolves after `secs` (uses `setTimeout`) */
export function delay(secs, value) {
    return new Promise(r => setTimeout(() => value ? r(value) : r(), 1e3 * secs));
}
/** Promise that rejects after `secs` (uses `setTimeout`) */
export function timeout(secs, reason) {
    return new Promise((_, reject) => setTimeout(() => reason ? reject(reason) : reject(new Error(`Timed out after ${secs} seconds`)), 1e3 * secs));
}
/** `promise` except it rejects after `maxSecs` */
export function timedOut(promise, maxSecs) {
    return Promise.race([
        promise,
        timeout(maxSecs, new Error(`Operation timed out after ${maxSecs} seconds`)),
    ]);
}
