import { useCallback, useState } from "react";
import { applyAction } from "../util/util.js";
import { clamp } from "@haskellian/clamp";
/** Like use state, but the number is bounded to `[min, max]` (closed interval) */
export function useClamped(start, min, max) {
    const [state, setState] = useState(start);
    const setClamped = useCallback((action, ignoreClamp) => {
        if (ignoreClamp)
            setState(action);
        else
            setState(x => {
                const curr = clamp(min, x, max);
                return clamp(min, applyAction(action, curr), max);
            });
    }, [min, max]);
    const clamped = clamp(min, state, max);
    return [clamped, setClamped];
}
