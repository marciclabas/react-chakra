import { useCallback, useRef, useState } from "react";
import { applyAction } from "../util/util.js";
/** Like `useState` but returns `[state, setState, ref]`. `ref` is synchronously updated when calling `setState` */
export function useRefState(initialState) {
    const [state, _setState] = useState(initialState);
    const ref = useRef(state);
    const setState = useCallback((action) => _setState(x => {
        const newState = applyAction(action, x);
        ref.current = newState;
        return newState;
    }), []);
    return [state, setState, ref];
}
